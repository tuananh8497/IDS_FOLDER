setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Lecture/w12/lecture_code")
?HistData
HistData?
library(HistData)
# create the dataset
library(tidyverse)
install.packages("HistData")
library(HistData)
install.packages("HistData")
HistData?
?HistData
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
# means and standard deviations
galton_heights %>%
summarize(mean(father), sd(father), mean(son), sd(son))
# create the dataset
library(tidyverse)
install.packages("HistData")
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
# means and standard deviations
galton_heights %>%
summarize(mean(father), sd(father), mean(son), sd(son))
# scatterplot of father and son heights
galton_heights %>%
ggplot(aes(father, son)) +
geom_point(alpha = 0.5)
rho <- mean(scale(x)*scale(y))
galton_heights %>%
summarize(r = cor(father, son)) %>%
pull(r)
# bi-variate_normal_dist
galton_heights %>%
mutate(z_father = round((father - mean(father)) / sd(father))) %>%
filter(z_father %in% -2:2) %>%
ggplot() +
stat_qq(aes(sample = son)) +
facet_wrap( ~ z_father)
x <- rnorm(100, 5, 5)
y <- rnorm(100, -3, 4)
data = tibble(x,y)
data  %>%
mutate(z_x = round((x - mean(x)) / sd(x))) %>%
ggplot() +
stat_qq(aes(sample = y)) +
facet_wrap( ~ z_x)
# compute a regression line to predict the son's height from the father's height
mu_x <- mean(galton_heights$father)
mu_y <- mean(galton_heights$son)
s_x <- sd(galton_heights$father)
s_y <- sd(galton_heights$son)
r <- cor(galton_heights$father, galton_heights$son)
m_1 <-  r * s_y / s_x
b_1 <- mu_y - m_1*mu_x
# compute a regression line to predict the father's height from the son's height
m_2 <-  r * s_x / s_y
b_2 <- mu_x - m_2*mu_y
# compute RSS for any pair of beta0 and beta1 in Galton's data
library(HistData)
data("GaltonFamilies")
set.seed(1983)
galton_heights <- GaltonFamilies %>%
filter(gender == "male") %>%
group_by(family) %>%
sample_n(1) %>%
ungroup() %>%
select(father, childHeight) %>%
rename(son = childHeight)
rss <- function(beta0, beta1, data){
resid <- galton_heights$son - (beta0+beta1*galton_heights$father)
return(sum(resid^2))
}
# plot RSS as a function of beta1 when beta0=25
beta1 = seq(0, 1, len=nrow(galton_heights))
results <- data.frame(beta1 = beta1,
rss = sapply(beta1, rss, beta0 = 25))
results %>% ggplot(aes(beta1, rss)) + geom_line() +
geom_line(aes(beta1, rss))
# plot predictions and confidence intervals
galton_heights %>% ggplot(aes(son, father)) +
geom_point() +
geom_smooth(method = "lm")
# predict Y directly
fit <- galton_heights %>% lm(son ~ father, data = .)
Y_hat <- predict(fit, se.fit = TRUE)
names(Y_hat)
# plot best fit line
galton_heights %>%
mutate(Y_hat = predict(lm(son ~ father, data=.))) %>%
ggplot(aes(father, Y_hat))+
geom_line()
View(fit)
library(HistData)?
?HistData
View(data)
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Final Assessment")
Countries <- df(Countries)
# Unit: Introduction to Data Science (11372), Semester 1 2021
# Author: Tuan Anh (Vincent) Nguyen - u3196825
# Description: The code for Part B Data Preparation, exploring and modeling
#               for final assessment of the unit
# install tidyverse if it is not installed
if (!("tidyverse" %in% rownames(installed.packages()))){
install.packages("tidyverse")
install.packages('plyr')
}
# load required library.
library("tidyverse")
library(plyr)
library(dplyr)
library(readr)
library(lubridate)
# 1. Load and read the data from the CSV files and store them into dataframes named appropriately.
Countries <- read_csv("data/Countries.csv")
Countries <- df(Countries)
library(readr)
Countries <- read_csv("data/Countries.csv",
na = "0")
View(Countries)
# 1. Load and read the data from the CSV files and store them into dataframes named appropriately.
Countries <- read_csv("data/Countries.csv", na = "0")
Countries <- df(Countries)
View(Countries)
Covid19 <- read_csv("data/Covid19.csv", na = "0")
View(Covid19)
Recovered <- read_csv("data/Recovered.csv") ## need extract attention
View(Recovered)
Tests <- read_csv("data/Tests.csv", na = "0")
View(Tests)
View(Covid19)
View(Countries)
View(Recovered)
View(Covid19)
View(Recovered)
View(Covid19)
View(Covid19)
View(Countries)
View(Covid19)
df_countries <- data.frame(Countries)
# 1. Load and read the data from the CSV files and store them into dataframes named appropriately.
Countries <- read_csv("data/Countries.csv")
df_Countries <- data.frame(Countries)
View(Countries)
Covid19 <- read_csv("data/Covid19.csv")
df_Covid19 <- data.frame(Covid19)
View(Covid19)
Recovered <- read_csv("data/Recovered.csv") ## need extract attention
df_Recovered <- data.frame(Recovered)
View(Recovered)
Tests <- read_csv("data/Tests.csv")
df_Tests <- data.frame(Tests)
View(Tests)
View(df_Covid19)
spec(df_Recovered)
View(df_Recovered)
View(Recovered)
View(df_Covid19)
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Lecture/w6/code_examples")
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Lecture/w7/code_examples")
library(tidyverse)
# for more information about the dataset, we can use ? operator
?USArrests
all_data <- USArrests
all_data
# select subset (6 rows) of the data
data_df <- all_data[c(1, 10, 20, 30, 40, 50),]
data_df
View(data_df)
View(data_df)
View(all_data)
# convert it to tibble
data_tbl <- as_tibble(data_df)
data_tbl
# add the rownames as a separte column and give it a name, i.e. state
state <- rownames(data_df)
state
data_tbl <- data_tbl %>%
mutate(state=state)
data_tbl
#-------------------------------------------
# Using gather function to turn wide table to long
data_tbl_1 <- gather(data_tbl,
key= "arrest_attribute",
value= "arrest_estimate",
c(Murder,Rape,Assault,UrbanPop))
data_tbl_1
View(data_tbl)
View(data_tbl_1)
#-------------------------------------------
# Using Spread function to turn log table to wide
data_tbl_2 <- spread(data_tbl_1,
key = "arrest_attribute",
value = "arrest_estimate"
)
data_tbl_2
View(data_tbl_2)
View(data_tbl)
View(data_tbl_2)
View(data_tbl)
View(data_tbl_2)
View(data_tbl_1)
View(data_tbl)
View(data_tbl_1)
View(data_tbl)
View(data_tbl_1)
View(all_data)
View(data_tbl_2)
#-------------------------------------------
# Using unite function to join coulmns into one character column
data_tbl_3 <- unite(data_tbl,
col = "Murder_Assault",
Murder, Assault,
sep = "_")
data_tbl_3
#-------------------------------------------
# Using separate function to split a coulmn into multiple columns
data_tbl_4 <- separate(data_tbl_3,
col = "Murder_Assault",
into= c("Murder", "Assault"),
sep = "_")
View(data_tbl_4)
