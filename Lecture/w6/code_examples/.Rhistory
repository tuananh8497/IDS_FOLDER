map_dfr(~ read_csv(.), .id = "groups") %>%
rename(meal_types = X1) %>%
mutate(groups = paste("G",str_extract(groups, "10|[1-9]"), sep = ""))
participants <- read_csv("data/participants.csv") %>%
rename_all(~ tolower(.)) %>%
rename(subject_id = subjectid, extra_calories = extracalories, gained_weight = gw)
knitr::kable(head(participants), caption = "Participants")
participants_test <- read_csv("data/test_participants.csv") %>%
rename_all(~ tolower(.)) %>%
rename(subject_id = subjectid, extra_calories = extracalories, gained_weight = gw)
knitr::kable(head(participants_test), caption = "Participants test")
all_groups_totals <- all_groups %>%
group_by(groups) %>%
summarise(groups_total_calories = sum(calories))
knitr::kable(all_groups_totals, caption = "Group Totals")
participants_w_calories_train <- participants %>%
left_join(all_groups_totals, by = "groups") %>%
rename(diet_calories = groups_total_calories)
knitr::kable(head(participants_w_calories_train), caption = "Training set with calories")
participants_w_calories_test <- participants_test %>%
left_join(all_groups_totals, by = "groups") %>%
rename(diet_calories = groups_total_calories)
knitr::kable(head(participants_w_calories_test), caption = "Test set with calories")
participants_final_train <- participants_w_calories_train %>%
mutate(total_calories = diet_calories + extra_calories, groups = factor(groups, levels = c("G1","G2","G3",
"G4","G5","G6",
"G7","G8","G9","G10"),
ordered = TRUE)) %>%
select(subject_id, gender, groups, diet_calories, extra_calories,
total_calories, gained_weight)
knitr::kable(head(participants_final_train), caption = "Final training set")
participants_final_test <- participants_w_calories_test %>%
mutate(total_calories = diet_calories + extra_calories, groups = factor(groups, levels = c("G1","G2","G3",
"G4","G5","G6",
"G7","G8","G9","G10"),
ordered = TRUE)) %>%
select(subject_id, gender, groups, diet_calories, extra_calories,
total_calories, gained_weight)
knitr::kable(head(participants_final_test), caption = "Final test set")
```{r echo=FALSE}
diet_groups_per_gender_freq <- table(participants_final_train$gender, participants_final_train$groups)
knitr::kable(diet_groups_per_gender_freq)
diet_groups_per_gender_prop <- prop.table(diet_groups_per_gender_freq)
knitr::kable(diet_groups_per_gender_prop)
p_female <- margin.table(diet_groups_per_gender_prop, 1)["F"]
G5_prop_female <- diet_groups_per_gender_prop["F", "G5"]
probability_female_G5 <- G5_prop_female / p_female
p_female <- margin.table(diet_groups_per_gender_prop, 1)["F"]
G5_prop_female <- diet_groups_per_gender_prop["F", "G5"]
probability_female_G5 <- G5_prop_female / p_female
p_female
G5_prop_female
probability_female_G5
p_male <- margin.table(diet_groups_per_gender_prop, 1)["M"]
G5_prop_male <- diet_groups_per_gender_prop["M", "G5"]
probability_male_G5 <- G5_prop_male / p_male
probability_male_G5
ggplot(participants_final_train, aes(x=gender, color=groups, fill=groups))+
geom_histogram(stat="count", position = "dodge")+
labs(title = "Frequency of groups by gender", y = "frequencies")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette = "Spectral")+
scale_color_brewer(palette = "Spectral")
total_calories_quantiles <- quantile(participants_final_train$total_calories)
knitr::kable(total_calories_quantiles, caption = "Total calories quantiles", col.names =  "Calories")
gained_weight_quantiles <- quantile(participants_final_train$gained_weight)
knitr::kable(gained_weight_quantiles, caption = "Gained weight quantiles", col.names =  "Weights")
average_gained_weight <- participants_final_train %>%
group_by(gender) %>%
summarise(avg_gained = mean(gained_weight))
knitr::kable(average_gained_weight, caption = "Average gained weight by gender")
ggplot(participants_final_train, aes(x = gained_weight, fill = gender, color = gender))+
geom_density(alpha = 0.3)+
labs(title = "Density of gained weight by gender", x = "gained weight", y = "density")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette = "Set2")+
scale_color_brewer(palette = "Set2")
ggplot(participants_final_train, aes(x = gender, y = gained_weight, fill = gender))+
geom_boxplot(alpha = 0.3)+
labs(title = "Gained weights by gender", x = "gender", y = "gained weight")+
theme(plot.title = element_text(hjust = 0.5))+
scale_fill_brewer(palette = "Set2")+
scale_color_brewer(palette = "Set2")
tukey_outlier_fun <- function(vector){
quartiles <- quantile(vector)
lq <- quartiles[2]
uq <- quartiles[4]
iqr <- uq - lq
l <- lq - 1.5 * iqr
h <- uq + 1.5 * iqr
out_val <- vector < l |  vector > h
return(out_val)
}
participants_final_train_outliers <- participants_final_train %>%
mutate(outliers = tukey_outlier_fun(participants_final_train$gained_weight)) %>%
filter(outliers == TRUE)
knitr::kable(participants_final_train_outliers, caption = "Gained weight outliers")
gained_weight_total_cal_corr <- cor(participants_final_train$gained_weight, participants_final_train$total_calories)
gained_weight_total_cal_corr
gained_weight_total_cal_corr
ggplot(participants_final_train, aes(total_calories, gained_weight))+
geom_point(color = "lightblue", alpha = 0.75)+
geom_smooth(method = "lm")+
labs(title = "Total calories and gained weight", x = "total calories",
y= "gained weight")+
theme(plot.title = element_text(hjust = 0.5))
gained_weight_total_cal_lm <- lm(gained_weight ~ total_calories, data = participants_final_train)
summary(gained_weight_total_cal_lm)
gained_weight_total_cal_lm_coefficients <- gained_weight_total_cal_lm$coefficients
knitr::kable(gained_weight_total_cal_lm_coefficients, caption = "Gained weight by total calorie coefficients", col.names = "Coefficients")
Based on the above coefficients the intercept value indicates that even consuming 0 calories participants could be expected to gain approximately `r gained_weight_total_cal_lm_coefficients[1]` kg. The total calories coefficient indicates that for every calorie consumed the participants weight would increase by approximately `r gained_weight_total_cal_lm_coefficients[2]` kg.
Based on the above coefficients the intercept value indicates that even consuming 0 calories participants could be expected to gain approximately `r gained_weight_total_cal_lm_coefficients[1]` kg. The total calories coefficient indicates that for every calorie consumed the participants weight would increase by approximately `r gained_weight_total_cal_lm_coefficients[2]` kg.
gained_weight_total_cal_lm_coefficients[2]
participants_final_train_lm <- participants_final_train %>%
mutate(residuals = residuals(gained_weight_total_cal_lm), predicted = predict(gained_weight_total_cal_lm))
ggplot(participants_final_train_lm, aes(total_calories, gained_weight))+
labs(title = "Regression of total calories consumed on gained weight", x = "total calories",
y = "gained weight", caption = "Predicted are depicted in blue and residuals are depicted in red")+
geom_smooth(method = "lm", color = "lightgrey")+
geom_point(aes(y = predicted), color = "blue", alpha = 0.3)+
geom_point(aes(color = abs(residuals)), color = "red", alpha = 0.3)+
geom_segment(aes(xend = total_calories, yend = predicted), color = "grey", alpha = 0.2)+
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5, color = "grey"))
participants_final_test_lm <- participants_final_test %>%
mutate(predicted = predict(gained_weight_total_cal_lm, participants_final_test))
knitr::kable(head(participants_final_test_lm), caption = "Test data with predicted")
participants_final_combined <- participants_final_train_lm %>%
bind_rows(participants_final_test_lm)
combined_predict <- predict(gained_weight_total_cal_lm, participants_final_combined, interval="predict")
participants_final_combined <- participants_final_combined %>%
cbind(combined_predict)
ggplot(participants_final_combined, aes(total_calories, gained_weight))+
geom_point(color = "lightblue", alpha = 0.75)+
stat_smooth(method = lm)+
geom_line(aes(y = lwr), colour = "red", linetype = "dashed")+
labs(title = "Prediction interval band on regression line of training data", x = "total calories",
y= "gained weight")+
geom_line(aes(y = upr), colour = "red", linetype = "dashed")+
theme(plot.title = element_text(hjust = 0.5))
paste("Leo", "the", "lion")
paste("a", "b")
paste("a", "b", sep="")
paste(1:5)
paste("a", 1:5)
paste(1:5, collapse="")
paste(1:5)
paste(1:5, sep="")
paste(1:5, collapse="")
paste(letters[1:5], collapse="")
5+3
log(100)
exp(2)
mean(1:5)
1:5
letters
a <- 5
# Infinity
1 / 0 # positive infinity
-1 / 0 # negative infinity
Inf + 5 # operation on Inf
is.finite(1 / 0) # check if finite
is.infinite(1 / 0) # check if infinite
# Undefined
1/Inf
# Undefined
Inf / Inf # NaN (not a number)
is.nan(Inf/Inf) # Check if NaN
# Missing values
NA + 5 # operation on NA
is.na(NA) # check is NA
is.na(4)
# NaN is NA, but NA is not NaN
is.na(NaN)
is.nan(NA)
# Character
houses.addresses <-  c("7 George st",
"18/5 Irwan cresent",
"8 Morad close",
"1/2 London Circuit")
houses.addresses
letters
letters
length(houses.addresses)
is.character(houses.addresses)
str(houses.addresses)
x <- 6:15
x
y <- 21:30
y
length(x)
length(y)
# arithematic op on vectors
x+y
x * y
x / y
x
# logical op on vectors
x > 8
x >= 8
y
y == 28
# subsetting
x[1]
x
# subsetting
x[1]
x
# subsetting
x[1]
x[2]
y
y[2:5]
F
x[c(T,F,F,T,F,T,T,F, F,T)]
x >= 8
x[x>=8]
x[x >= 7]
# coercions: converting one type to another
# implicit coercions
z <- c(8, 7.4, 14, "5")
str(z)
x >= 9
as.numeric(x >= 9)
as.character(x)
# non sensible coercions
houses.addresses <- c("7 George st", "18/5 Irwan cresent", "8 Morad close", "1/2 London Circuit")
houses.addresses
as.numeric(houses.addresses) # warning here and NAs are the result
# p Generate random marks for the students
students.length <- 50
students.marks <- rnorm(students.length, mean= 50, sd=50)
students.marks
# compute average
students.average <- mean(students.marks)
print(paste("average mark of the class is:", students.average))
# A check average mark of the class
if(students.average >= 50){
print(paste("The performance is OK, as the average =", students.average))
}
print("Test is completed!")
# Students names
students.names <- c("A", "B", "C", "D", "E")
# chemistry marks
student.marks.chemistry <- c(65, 59, 80, 91, 70)
# biology marks
student.marks.biology <- c(73, 55, 61, 48, 80)
# sum up the marks for all of the students
students.marks.combined <- student.marks.chemistry + student.marks.biology
# which one got the highest mark?
student_id <- which.max(students.marks.combined)
# print name of the student with the highest mark
print(names[student_id])
# print name of the student with the highest mark
print(students.names[student_id])
library(tidyverse)
print("page numbber is 1")
# also with a transposed tibble, 'tibble'
tbl_2 <- tibble( -x, -y, -z,
"a", 2, 3.6,
"b", 1, 8.5
)
# To use tibble, we first need to load it It It is part of the -tidyverse- package
if (!("tidyverse" %in% rownames(installed.packages()))){
install.packages("tidyverse")
}
library("tidyverse")
# creating a tibble from existing data frame
my_data <- iris
my_data
# how is it printed?
# convert it to tibble
my_data2 <- as_tibble(my_data)
my_data2 # and now
############################################33 # another way to create a tibble
tbl_1 <- tibble(
x=1:5,
y=1, # recycling feature is allowed when it is just one element in a column
z=xA2+y)
tbl_1
############################################33 # another way to create a tibble
tbl_1 <- tibble(
x=1:5,
y=1, # recycling feature is allowed when it is just one element in a column
z=xA2+y)
############################################33 # another way to create a tibble
tbl_1 <- tibble(
x=1:5,
y=1, # recycling feature is allowed when it is just one element in a column
z=x^2+y)
tbl_1
# also with a transposed tibble, 'tibble'
tbl_2 <- tibble( -x, -y, -z,
"a", 2, 3.6,
"b", 1, 8.5
)
tb1_2
# also with a transposed tibble, 'tibble'
tbl_2 <- tibble( ~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
# also with a transposed tibble, 'tibble'
tbl_2 <- tibble( ~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tbl_1
# also with a transposed tibble, 'tibble'
tbl_2 <- tibble( ~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
# also with a transposed tibble, 'tibble'
tbl_2 <- tribble( ~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tb1_2
# also with a transposed tibble, 'tibble'
tbl_2 <- tribble( ~x, ~y, ~z,
"a", 2, 3.6,
"b", 1, 8.5
)
tb1_2
help tribble
?tribble
# also with a transposed tibble, 'tibble'
tbl_2 <- tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
tb1_2
tbl_2
tbl_2
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library("tidyverse")
# creating a tibble from existing data frame
my_data <- iris
View(my_data)
my_data
# how is it printed?
# convert it to tibble
my_data2 <- as_tibble(my_data)
my_data2 # and now
View(my_data2)
my_data
my_data2
my_data3 <- data.frame(my_data2)
my_data3
############################################33 # another way to create a tibble
tbl_1 <- tibble(
x=1:5,
y=1, # recycling feature is allowed when it is just one element in a column
z=x^2+y)
tbl_1
# also with a transposed tibble, 'tibble'
tbl_2 <- tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
tbl_2
lubridate
lubridate::now()
.libPaths()
myPaths <- .libPaths()
myPaths <- c(myPaths, ‘C:/CustomR’)
myPaths <- c(myPaths, "C:/CustomR")
.libPaths(myPaths)
.libPaths
.libPaths()
myPaths
.libPaths()
.libPaths()
cars
install.packages("car", lib = "c:/customR")
car
library(car)
install.packages("tidyverse", lib = "c:/customR")
tidyverse::tidyverse_conflicts()
sub("first_last")
sub("first_last", "_")
sub("_", "first_last")
install.packages("nycflights13")
setwd("C:/teaching/intro_to_data_science_sem1_2020/lectures/week6/code_examples")
clear
library(readr)
data <- readr::read_csv("data/data_sample.csv")
data
library("tidyverse")
heights <- read_csv("data/heights.csv")
heights
# supply inline csv file
read_csv("a,b,c
1,2,3
4,5,6")
# skip first two lines, i.e. meta data the beginning of a file
read_csv("The first line of metadata
The second line of metadata
x,y,z
1,2,3", skip = 2)
# or skip when comment
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
# by default the first row is for column, we can skip this rule
read_csv("1,2,3\n4,5,6", col_names = FALSE) # \n is convenient shortcut for new line
# pass column names
read_csv("1,2,3\n4,5,6", col_names = c("x", "y", "z"))
# deal with na values
read_csv("a,b,c\n1,2,.", na = ".")
# col specifications
# logicals
lgl <- parse_logical(c("TRUE", "FALSE", "NA"))
str(lgl)
# integers
intgr <- parse_integer(c("1", "2", "3"))
str(intgr)
# date
dt <- parse_date(c("2010-01-01", "1979-10-14"))
str(dt)
# which strings should be specified as missing
intgr_missing <- parse_integer(c("1", "231", ".", "456"), na = ".")
str(intgr_missing)
# sometimes the parsing fails, NAs will be used when failure is occuring
x <- parse_integer(c("123", "345", "abc", "123.45", "221"))
x
# here you can use problems
problems(x)
x
# here you can use problems
problems(x)
# parse numbers with . or , or $ or %
dbl <- parse_double("1.24")
str(dbl)
num <- parse_number("$123,456,789")
num
num <- parse_number("$123,456,789")
num
num <- parse_number("$123.456.789", locale=locale(grouping_mark = '.'))
num
num <- parse_number("123'456'789", locale = locale(grouping_mark = "'"))
num
# base function to read data.frame
df <- read.csv(readr_example("challenge.csv"))
df
view(df)
df[1001,]
str(df)
problems(df) # no problems as everything are chars
##################################
# readr functions to read csv
tbl <- read_csv(readr_example("challenge.csv"))
tbl
view(tbl)
str(tbl)
tbl[1001,]
##################################
# use problems to check the problems in the tbl parsing
problems(tbl)
# how to fix the problems
# first let us fix the problem by hard-specifying the column types
tbl2 <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_character()
)
)
tbl2
tail(tbl2) # there are dates stored with this column
# change the character to date
tbl3 <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
tbl3
tail(tbl3)
str(tbl3)
# call the required libraries
library(tidyverse)
library(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
df <- flights
# filter based on conditions
filter(df, month == 1, day == 1)
# filter based on conditions
filter(df, month == 1, day == 1)
df
# filter based on conditions
filter(df, month == 1, day == 1)
df <- flights
# filter based on conditions
filter(df, df$month == 1, df$day == 1)
?filter
# filter based on conditions
filter(df, df$month == 1, df$day == 1)
df
view(df)
df <- flights
df
view(df)
