# arrays
my.array <- array(1:24, dim=c(3,4,2))
my.array
# Q: how are the items ordered?
# A: It is ordered column-wise
# change the dimensions of a vector in R
my.vector <- 1:24
dim(my.vector) <- c(3,4,2)
# check that the contents of two objects are equal using identical function
identical(my.array, my.vector)
# matrices
my.matrix <- matrix(1:24, 4)
my.matrix
# Create character vector for types of the properties
houses.types.chr <- c("House", "Unit", "House", "Unit")
houses.types
str(houses.types)
# Create integral vector for types of the properties
houses.types <- c(1L, 2L, 1L, 2L)
houses.types
str(houses.types)
str(houses.types)
# create a factor
houses.types <- factor(houses.types.chr)
clear
"clear"
v <- c("Y","N","Y","N","Y","N")
str(v)
x <- fact
x <- factor(v)
#
employees.gender <- rep(c("female", "male", "male", "female", "male"), 10)
employees.gender
employees <- factor(employees.gender)
str(employees)
employees
x
v
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)
factor_gender_vector <-factor(gender_vector)
class(factor_gender_vector)
# Subsetting arrays and matrices
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow= 3, ncol=4)
m
# extract the element of the second row and third column
m[2, 3]
# extract all elements of the second row
m[2,]
# extract all elements of the third column
m[,3]
# extract all element of the second row except the the third element of this row
m[2, -3]
# extract the second and fourth elements of the second row
m[2, c(2, 4)]
# extract all elements of the second row except the second and fourth elements
m[2, -c(2, 4)]
View(m)
View(m)
# all of the above are either column or row, so the results were vectors
# The results can be a sub-matrix
a <- m[c(1,2), c(2, 4)]
View(a)
a
class(a)
# If you want the result of subsetting to be a matrix even for row and column
b <- m[1, ,drop= FALSE] # result in matrix
b
class(b)
m
a <- matrix(c(1,2,3,4,5,6,7,8,9,10), 2,5)
a
str(a)
class(a)
b <- array(c(1,2,3,4,5,6,7,8), c(2,2,2))
b
my_array <- array(c(1:24), dim = c(3,4,2))
my_array
my.vector <- 1:24
dim(my.vector) <- c(3,4,2)
identical(my_array, my.vector)
my.matrix <- matrix(1:24, nrow = 4, ncol = 6)
my.matrix
result <- matrix(1:8, 2, 4, byrow = TRUE)
result
colnames(result) <- c("first", "second", "third","fourth")
rownames(result) <- c("firstRow", "secondRow")
result
result <- matrix(1:8, 2, 4, byrow = FALSE)
result
result <- matrix(1:8, 2, 4, byrow = TRUE)
result
colnames(result) <- c("first", "second", "third","fourth")
rownames(result) <- c("firstRow", "secondRow")
result
result["store1",]
result["store1", ]
rownames(result) <- c("store1", "store2")
result["store1", ]
result
result["store2", c("first", "fourth")]
# vectors
# Character
houses.addresses <- c("7 George st", "18/5 Irwan cresent", "8 Morad close", "1/2 London Circuit")
# vectors
# Character
houses.addresses <- c("7 George st", "18/5 Irwan cresent", "8 Morad close", "1/2 London Circuit")
# Numeric
houses.area <- c(420.5, 220.15, 750.4, 120.5)
# Integer
houses.bedrooms <- c(4L, 3L, 5L, 2L)
# Logical
houses.has.garden <- c(TRUE, FALSE, TRUE, FALSE)
# Combine the features of each proprty
# using vector
houses.sample <- c(address= houses.addresses[1], area=houses.area[1], bedrooms= houses.bedrooms[1],
has_garden=houses.has.garden[1])
print(houses.sample)
mode(houses.sample)
houses.sample[1]
houses.sample[2]
houses.sample['bedrooms']
str(houses.sample)
# using list
houses.sample <- list(address= houses.addresses[1], area=houses.area[1], bedrooms= houses.bedrooms[1],
has_garden=houses.has.garden[1])
print(houses.sample)
mode(houses.sample)
houses.sample[1]
houses.sample[2]
houses.sample['bedrooms']
houses.sample$bedrooms
mode(houses.sample$bedrooms)
str(houses.sample)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
employ.data <- data.frame(employee, salary, startdate)
View(employ.data)
# check structure of data frame
str(employ.data)
# keep characters as characters
employ.data <- data.frame(employee, salary, startdate, stringsAsFactors = FALSE)
str(employ.data)
str(employ.data)
# using the accessor $ to access the variables of the data frame
employ.data$employee
class(employ.data$salary)
employ.data$startdate[1]
employ.data$startdate[0]
employ.data$startdate[2]
employ.data$startdate[1]
# what is the difference between the following expressions
aa <- employ.data["salary"]
bb <- employ.data[["salary"]]
aa
class(aa)
bb
class(bb)
# create and manipulate data frame
my.dataset <- data.frame(site=c("A", "B", "A", "A", "B"),
season=c("Winter", "Summer", "Summer", "Spring", "Fall"),
pH=c(7.4,6.3,8.6,7.2,8.9), stringsAsFactors = FALSE)
View(my.dataset)
my.dataset
my.dataset[3, 2]
my.dataset$pH
# subsetting with conditions
my.dataset[my.dataset$pH > 7, ]
