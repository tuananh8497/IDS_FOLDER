# Subsetting arrays and matrices
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow= 3, ncol=4)
m
# extract the element of the second row and third column
m[2, 3]
# extract all elements of the second row
m[2,]
# extract all elements of the third column
m[,3]
# extract all element of the second row except the the third element of this row
m[2, -3]
# extract the second and fourth elements of the second row
m[2, c(2, 4)]
# extract all elements of the second row except the second and fourth elements
m[2, -c(2, 4)]
# all of the above are either column or row, so the results were vectors
# The results can be a sub-matrix
a <- m[c(1,2), c(2, 4)]
a
class(a)
# If you want the result of subsetting to be a matrix even for row and column
b <- m[1, ,drop= FALSE] # result in matrix
b
class(b)
# rbind and cbind example
ml <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow=3, ncol=4)
ml
res <- cbind(c(4, 76, 12), ml[, 4])
res
res <- rbind(c(4, 76, 12, 14), m1[31 ])
res
m2 <- matrix(rep(10, 16), nrow= 4, ncol= 4)
m2
m3 <- rbind(m1[11 ], m2[3, ])
m3
# rbind and cbind example
ml <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow=3, ncol=4)
ml
res <- cbind(c(4, 76, 12), ml[, 4])
res
res <- rbind(c(4, 76, 12, 14), m1[31 ])
res <- rbind(c(4, 76, 12, 14), m1[3, ])
# rbind and cbind example
m1 <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow=3, ncol=4)
m1
res <- cbind(c(4, 76, 12), ml[, 4])
res
res <- rbind(c(4, 76, 12, 14), m1[3, ])
res
m2 <- matrix(rep(10, 16), nrow= 4, ncol= 4)
m2
m3 <- rbind(m1[11 ], m2[3, ])
m3
# using rownames() and colnames() functions
results <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow= TRUE)
colnames(results) <- c("1st_cirt", "2nd_qrt", "3rd_qrt", "4th_qrt")
# names of the rows
rownames(results) <- c("storel", "store2")
# show the matrix
results
results["storel", ]
results["store2", c("1st_qrt", "4th_qrt")]
results
results["store2", c("1st_qrt", "4th_qrt")]
results
# names of the rows
rownames(results) <- c("store1", "store2")
# show the matrix
results
results["store1", ]
results["store2", c("1st_qrt", "4th_qrt")]
results
results[, c("1st_qrt", "4th_qrt")]
results["store1", c("1st_qrt", "4th_qrt")]
results["store2", ]
results["store2", ("1st_qrt", "4th_qrt")]
colnames(results) <- c("1st_qrt", "2nd_qrt", "3rd_qrt", "4th_qrt")
results["store2", c("1st_qrt", "4th_qrt")]
# create and manipulate data frame
my.dataset <- data.frame(site=c("A", "B", "A", "A", "B"),
season=c("Winter", "Summer", "Summer", "Spring", "Fall"),
pH=c(7.4,6.3,8.6,7.2,8.9), stringsAsFactors = FALSE)
my.dataset
my.dataset[3, 2]
my.dataset$pH
# subsetting with conditions
my.dataset[my.dataset$pH > 7, ]
my.dataset[my.dataset$pH > 7, "site"]
my.dataset[my.dataset$season == "Summer", c("site", "pH")]
# Is it possible to refer to the columns directly?
my.dataset[pH > 7, ]
# This is only possible if you 'attach' the dataset
attach(my.dataset)
my.dataset[pH > 7, ]
season
my.dataset[site=='B', ]
# To go back, use 'detach'
detach(my.dataset)
season
# it is much safer to use 'subset'
subset(my.dataset, pH > 8)
subset(my.dataset, season=="Summer", select=c(season,pH))
# change values in the dataframe, e.g., sum 1 to the pH values of all summer rows
my.dataset[my.dataset$season == "Summer", 'pH'] <- my.dataset[my.dataset$season == "Summer", 'pH'] + 1
subset(my.dataset, season=="Summer", select=c(season,pH))
# Create character vector for types of the properties
houses.types <- c("House", "Unit", "House", "Unit")
houses.types <- c("House", "Unit", "House", "Unit")
houses.types
str(houses.types)
# Create integral vector for types of the properties
houses.types <- c(1L, 2L, 1L, 2L)
houses.types
str(houses.types)
houses.types
# Create character vector for types of the properties
houses.types.chr <- c("House", "Unit", "House", "Unit")
# create a factor
houses.types <- factor(houses.types.chr)
houses.types
str(houses.types)
houses.types.chr
houses.types
str(houses.types)
1:24
# arrays
my.array <- array(1:24, dim=c(3,4,2))
my.array
# arrays
my.array <- array(1:20, dim=c(3,4,2))
my.array
# arrays
my.array <- array(1:24, dim=c(3,4,1))
my.array
# Q: how are the items ordered?
# A: It is ordered column-wise
# change the dimensions of a vector in R
my.vector <- 1:24
my.vector
dim(my.vector) <- c(3,4,2)
my.vector
# matrices
my.matrix <- matrix(1:24, nrow= 4, ncol= 6)
# matrices
my.matrix <- matrix(1:24, 4,6)
my.matrix
# matrices
my.matrix <- matrix(1:24, 4)
my.matrix
# Subsetting arrays and matrices
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow= 3, ncol=4)
m
# extract the element of the second row and third column
m[2, 3]
# extract all elements of the second row
m[2,]
# extract all elements of the third column
m[,3]
m[2:3, 3:4]
# extract all element of the second row except the the third element of this row
m[2, ]
# extract all element of the second row except the the third element of this row
m[2, -3]
# rbind and cbind example
m1 <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23, 38, 17), nrow=3, ncol=4)
m1
m1
res <- cbind(c(4, 76, 12), m1)
res
res <- rbind(c(4, 76, 12, 14), m1)
res
# using rownames() and colnames() functions
results <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow= TRUE)
# using rownames() and colnames() functions
results <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4)
# using rownames() and colnames() functions
results <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4)
results
# using rownames() and colnames() functions
results <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow= TRUE)
results
colnames(results) <- c("1st_qrt", "2nd_qrt", "3rd_qrt", "4th_qrt")
results
# names of the rows
rownames(results) <- c("store1", "store2")
results
results["store1", ]
results["store2", c("1st_qrt", "4th_qrt")]
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
startdate
salary
employee
employ.data <- data.frame(employee, salary, startdate)
employ.data
# check structure of data frame
str(employ.data)
# keep characters as characters
employ.data <- data.frame(employee, salary, startdate, stringsAsFactors = FALSE)
str(employ.data)
employ.data
# using the accessor $ to access the variables of the data frame
employ.data$employee
employ.dataSsalary
employ.data$salary
employ.data$salary[2]
employ.data$startdate[1]
# what is the difference between the following expressions
aa <- employ.data$salary
# what is the difference between the following expressions
aa <- employ.data["salary"]
aa
# what is the difference between the following expressions
aa <- employ.data[1, "salary"]
aa
# what is the difference between the following expressions
aa <- employ.data[,"salary"]
aa
# what is the difference between the following expressions
aa <- employ.data["salary"]
# what is the difference between the following expressions
aa <- employ.data["salary"]
# what is the difference between the following expressions
aa <- employ.data["salary"]
bb <- employ.data[["salary"]]
aa
bb
class(aa)
class(bb)
employ.data$salary
class(employ.data$salary)
# what is the difference between the following expressions
aa <- employ.data["salary"]
# create and manipulate data frame
my.dataset <- data.frame(site=c("A", "B", "A", "A", "B"),
season=c("Winter", "Summer", "Summer", "Spring", "Fall"),
pH=c(7.4,6.3,8.6,7.2,8.9), stringsAsFactors = FALSE)
my.dataset
my.dataset[3, 2]
my.dataset$pH
# subsetting with conditions
my.dataset[my.dataset$pH > 7, ]
# subsetting with conditions
my.dataset[my.dataset$pH > 7]
# subsetting with conditions
my.dataset[,my.dataset$pH > 7]
# subsetting with conditions
my.dataset[my.dataset$pH > 7, ]
my.dataset[my.dataset$pH > 7, "site"]
my.dataset[my.dataset$season == "Summer", c("site", "pH")]
my.dataset
my.dataset$new_col <- c(1,2,3,4,5)
my.dataset
edit(my.dataset)
names(my.dataset)
setwd("C:/teaching/intro_to_data_science_sem1_2020/lectures/week3/code_examples")
print("page numbber is 1)
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
print("page numbber is 1")
