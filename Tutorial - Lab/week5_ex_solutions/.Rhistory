summary(model)
plot(mode,2)
plot(model,2)
plot(model)
plot(model,2)
predicted <- predict(model, newdata = cars$speed)
predicted <- predict(model, newdata = cars$speed, se.fit = T)
predicted <- predict(model, newdata = cars, se.fit = T)
predicted
predicted$fit
?predict
predicted <- predict(model, newdata = cars)
predicted
predicted <- predict(model, newdata = cars, se.fit = T)
predicted$se.fit
parse_date("2018-May-07", format= "%Y-%B-%d")
library(tidyverse)
parse_date("2018-May-07", format= "%Y-%B-%d")
parse_date("2018-May-07", format= "%Y-%B-%D")
parse_date("2018-May-07", format= "%Y-%B-%d")
parse_date("January 1, 2010", format= "%B %d, %Y")
parse_date("January 1, 2010", format= "%B %D, %Y")
parse_date("Dec 30, 2014", format= "%b %d, %Y")
parse_date("Dec 30, 2014", format= "%b %D, %Y")
parse_date("2018-May-07", format= "%Y-%B-%d")
parse_date("2018-May-07", format= "%Y-%M-%d")
parse_date("2018-May-07", format= "%Y-%m-%d")
a <-  10
a
a <- 15
A <- 20
x <- 5.3
typeof(x)
class(x)
y <- as.integer(x)
y
class(y)
y <- as.integer(9.99)
y
x <- c(True, False)
x <- c(TRUE, FALSE)
x
str(x)
participants <- c("Jack", "Dione", "Reda", "Sally", "Adam")
before_weight <- c(78,72,78,79,105)
after_weight <- c(67,65,79,70,93)
loss_weight <-  before_weight - after_weight
loss_weight
mean(loss_weight)
participants[2]
participants[3]
max(loss_weight)
which.max(loss_weight)
participants[index]
index <- which.max(loss_weight)
participants[index]
index <- which(loss_weight == max(loss_weight)) # same as above
index
participants[index]
index_negative <- which(loss_weight < 0)
index_negative
participants[index_negative]
loss_weight
gender <- c("M", "M", "M")
any(gender == "F")
any(gender == "M")
any(loss_weight < 0)
LETTERS
letters
letters
my_letters <- letters
my_letters[1:12]
odd_letters_index <- seq(from=1, to= 26, by=2)
odd_letters_index
my_letters[odd_letters_index]
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', LETTERS)
index_vowels
LETTERS[index_vowels]
# print English consonants
# here we can either use the negative indices of the extracted vowels or
# again use the regular expressions
print(LETTERS[-index_vowels])
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', "hsdjfhkjsdhfkjhdsf jfkjhjkdhjkhjkdsfh jkhjkk sdjkjk sdlkj;diofyweoifldskj.s klhd")
index_vowels
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', "hsdjfhkjsdhfkijhdsf yjfkjhjkdhjkhjkdsfh jkhjkk sdjkjk sdlkj;diofyweoifldskj.s klhd")
index_vowels
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', "hsdjfhkjsdhfkijhdsfYyjfkjhjkdhjkhjAkdsfh jkhjkk sdjkjk sdlkj;diofyweoifldskj.s klhd")
index_vowels
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', LETTERS)
index_vowels
var <- 4
var2 <- 5
var3 <- 6
vec_of_ints <- c(4,5,6)
print(vec_of_ints)
str(vec_of_ints)
class(vec_of_ints)
length(vec_of_ints)
vec_of_ints * 5
vec_of_ints2 <- vec_of_ints * 5
mode(vec_of_ints)
typeof(vec_of_ints)
class(vec_of_ints)
help(mode)
?class
?mode
?typeof
vec_of_ints + vec_of_ints2
vec_of_chars <- c("Alex", "Greene", "Ibrahim")
vec_of_log <- c(T, F, F, T)
class(vec_of_log)
!vec_of_log
vec_of_log
people<- c("Jack", "Dione", "Reda", "Sally", "Adam")
people<- c("Jack", "Dione", "Reda", "Sally", "Adam")
Before <- c(78, 72, 78, 79, 105)
After <-  (67, 65, 79, 70, 93)
After <-  c(67, 65, 79, 70, 93)
loss <- Before - After
loss
biggest_loser <- people[5]
print(biggest_loser)
max(loss)
loss == max(loss)
loss
which(loss == max(loss))
index <- which(loss == max(loss))
index <- which(loss == max(loss))
biggest_loser <- people[index]
print(biggest_loser)
Before <- c(78, 72, 78, 79, 100)
After <-  c(67, 65, 79, 70, 93)
loss <- Before - After
loss
index <- which(loss == max(loss))
biggest_loser <- people[index]
print(biggest_loser)
Before <- c(70, 72, 78, 79, 100)
After <-  c(67, 65, 79, 70, 93)
loss <- Before - After
loss
Before <- c(70, 72, 78, 75, 100)
After <-  c(67, 65, 79, 70, 93)
loss <- Before - After
loss
index <- which(loss == max(loss))
biggest_loser <- people[index]
print(biggest_loser)
index2 <- which.max(loss)
biggest_loser <- people[index2]
print(biggest_loser)
index2
loss
before <- c("Jack"=78, "Dione"=72, "Reda"=78, "Sally"=79, "Adam"=105)
before
class(before)
any(loss < 0)
index_gain <- which(loss < 0)
index_gain
people(index_gain)
people[index_gain]
LETTERS
LETTERS[2]
LETTERS[c(2,26)]
LETTERS[2:10]
2:10
LETTERS[c(1,2,3,4,4,4,4,4)]
LETTERS[1:12]
seq(1, 26, by=2)
LETTERS[seq(1, 26, by=2)]
LETTERS[seq(1,26, by=5)]
LETTERS[seq(1,26, by=6)]
which(LETTERS == "A")
which(LETTERS == "E")
which(LETTERS == "Y")
vec_vowels <- c(which(LETTERS == "A"), which(LETTERS == "E"), which(LETTERS == "I"), which(LETTERS == "O"), which(LETTERS == "U"), which(LETTERS == "Y"))
vec_vowels
LETTERS[vec_vowels]
?grep
# print English vowels
# here we can use regular expression function 'grep' to do that
# to check the help of this function, we can do that via ?grep in the console window
index_vowels <- grep('["AEIOUY"]', LETTERS)
print(LETTERS[index_vowels])
# print English consonants
# here we can either use the negative indices of the extracted vowels or
# again use the regular expressions
print(LETTERS[-index_vowels])
rnorm(10)
rnorm(100, mean=5, std=2)
rnorm(100, mean=5, sd=2)
mean(rnorm(100, mean=5, sd=2))
sd(rnorm(100, mean=5, sd=2))
abs(-5)
abs(c(-5, -4))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
for(i in 1:10){
print(i)
}
var1 <- 2:5
var2 <- c(3, 7)
var3 <- c(TRUE, FALSE)
var4 <- 12
var1 * 10
var1[2:4]
var1[-3]
var1 + var2
var1
var2
var1 * var3
var1 + var4
var2 + var3
sum(var2)
sum(var3)
var1 * 10
var1[2:4]
var1[-3]
var1 + var2
var1 * var3
var1 + var4
var2 + var3
sum(var2)
sum(var3)
v <- c(v1,v2,v3)
v <- c("v1","v2","v3")
v[2]
v
v <- c("v1","v2","v3", "v4")
v
m <- matrix(v, 2, 2)
m
m[2,2]
m[1,]
m[1,c(1,2)]
m[,2]
ar <- array(1:12, c(2,3,2))
ar
# week 4, exercise 1
# practice on the matrices
v1 <- c(3, 9, -1, 4, 2, 6)
v2 <- c(5, 2, 0, 9, 3, 4)
# week 4, exercise 1
# practice on the matrices
v1 <- c(3, 9, -1, 4, 2, 6)
v2 <- c(5, 2, 0, 9, 3, 4)
# create m1
m1 <- matrix(v1, nrow=2)
m1
# create m2
m2 <- matrix(v2, ncol=3)
m2
# m1 + m2
m1 + m2
# m1 - m2
m1 - m2
# m1 * m2
m1 * m2
# m2^T
m3 <- t(m2)
m3
m2
# matrix multiplication
m4 <- m1 %*% m3
m4
# dimention of m4
dim(m4)
# subsetting by row or by column
m[,1]
m1[1,]
m1[,1]
m1
# add another row
m5 <- rbind(m1, c(2,4,6))
m5
books <- data.frame(author=c("Reda", "John", "Edward", "Ben"),
year=c(2104, 2016, 2005, 2019),
publisher=c("Wiley", "Springer", "Sage", "International Books"))
books
dim(books)
books[2,3]
colnames(books)
books[,"author"]
books$author
# create colour vector
boxes.colour <- c("purple", "red", "yellow", "brown", "blue")
# create weight vector
boxes.weight <- c(40, 30, 18, 23, NA)
# create the data frame
boxes.info <- data.frame(colour=boxes.colour, weight=boxes.weight)
boxes.info
# 1- display the data frame
boxes.info
# 3- Display the content of the first column, similar to matrix
boxes.info[,1]
# 3- Display the content of the first column, similar to matrix
boxes.info[,1]
# 2- Display the content of the third row, similar to matrix
boxes.info[3,]
# 3- Display the content of the first column, similar to matrix
boxes.info[,1]
boxes.info[,"colour"]
boxes.info$colour
# 4 select the [4, 1] elment
boxes.info[4,1] # equals the colur of the 4th box
boxes.info$colour
# 4 select the [4, 1] elment
boxes.info[4,1] # equals the colur of the 4th box
boxes.info$colour[4]
boxes.info[4, "colour"]
11:80
data <- 11:80
data
m <- matrix(data, nrow = 8, ncol = 10)
m <- matrix(data, nrow = 7, ncol = 10)
m
m <- matrix(data, nrow = 7)
m
m <- matrix(data, ncol = 10)
m
m <- matrix(data, ncol = 10, byrow = T)
m
data
arr <- array(data, c(7, 5, 2))
arr
arr <- array(data, c(7, 5, 2))
help(array)
?matrix
v1 <- c(3, 9, -1, 4, 2, 6)
v2 <- c(5, 2, 0, 9, 3, 4)
v1
v2
m1 <- matrxi(data=v1, nrow=2)
m1 <- matrxi(data=v1, nrow=2)
m1 <- matrix(data=v1, nrow=2)
m1
m2 <- matrix(data=v2, nrow = 2)
m2
m1 + m2
m1 - m2
m1 * m2
m3 <- t(m2)
m2
m3
m1
m3
m2
m3
m1
m3
m1 %*% m3
m4 <- m1 %*% m3
dim(m4)
m2
m5 <- rbind(m2, c(10, 20, 30))
m5
m5 <- rbind(m2, c(10, 20))
m5
m5 <- rbind(m2, c(10, 20, 30))
m5
m1
m1
m1[1,1]
m1[1,3]
df <- data.frame(firstname=c("A", "B", "C"),
lastname=c("X", "Y", "Z"),
age=c(30, 20, 40))
df
df[1,1]
df[1, "firstname"]
df$firstname
df$firstname[1]
boxes.colour <- c("purple", "red", "yellow", "brown")
boxes.weight <- c(40, 30, 18, 23)
boxes.info <- data.frame(colour=boxes.colour, weight=boxes.weight)
boxes.info
boxes.info[3,]
boxes.info[,2]
boxes.info$weight
boxes.info[4, 1]
boxes.info[5, 1]
boxes.info$colour[4]
mo <- data.frame(d=c("d1","d2"), year=c(2000, 2001))
mo
df <- data.frame(Id=c(1,2,3), names=c("IR", "AJ", "SM"))
df
tbl <- as_tibble(df)
df <- tibble(Id=c(1,2,3), names=c("IR", "AJ", "SM"))
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
detach("package:tidyr", unload = TRUE)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
tble <- tibble(Id=c(1,2,3), names=c("IR", "AJ", "SM"))
tble
df
books_df <- data.frame(author=c("Reda", "John", "Edward", "Ben"), year=c(2104, 2016, 2005, 2019), publisher=c("Wiley", "Springer", "Sage", "International Books"))
books_df
books_tble <- as_tibble(books_df)
books_tble
df_tmp <- as_data_frame(books_tble)
df_tmp <- as.data.frame(books_tble)
df_tmp
Anything_df <- data.frame(
A = 1:1000,
B = A * 2 + rnorm(length(A))
)
Anything_df <- data.frame(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # recycling
A = 1:1000
Anything_df <- data.frame(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # recycling
Anything_df <- data.frame(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # recycling
Anything_tbl <- tibble(
A = 1:1000,
B = A * 2 + rnorm(length(A))
)
rnorm(length(A)
rnorm(length(A))
rnorm(1000)
Anything_tbl <- tibble(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # resycling is supported
Anything_tbl
A = 1:1000
Anything_df <- data.frame(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # recycling is not supported
Anything_tbl <- tibble(
A = 1:1000,
B = A * 2 + rnorm(length(A))
) # resycling is supported
Anything_df
Anything_tbl
view(Anything_tbl)
Anything_df$C <- Anything_df$B\Anything_df$A
Anything_df$C <- Anything_df$B/Anything_df$A
Anything_df
Anything_tbl$C <- Anything_tbl$B/Anything_tbl$A
Anything_tbl
colnames(Anything_tbl) <- c("First", "Second", "Third")
Anything_tbl
colnames(Anything_df) <- c("First", "Second", "Third")
Anything_df
setwd("C:/teaching/2021/s1/intro_to_data_science_sem1_2021/tutorial_lab_notes/week5/week5_ex_solutions")
data_df <- read.csv("data.csv")
data_df
class(data_df)
data_tbl <- read_csv("data.csv")
data_tbl
class(data_tbl)
typeof(data_tbl)
mode(data_tbl)
data_tbl <- read_csv("a,b\n1,2\n4,5")
data_tbl
library(tidyverse)
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n\"1")
read_csv("a,b\n\1")
read_csv("a,b\n1")
read_csv("a,b\n\"1")
read_csv("a,b\n\"1")
read_csv("a,b\n""1")
read_csv("a,b\n\"1")
read_csv("a,b\n1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv2("a;b\n1;3")
read_tcsv("a b\n1 3")
read_tsv("a b\n1 3")
read_tsv("a b\n1  3")
read_tsv("a      b\n1      3")
read_tsv("a\tb\n1\t3")
read_delim("a\tb\n1\t3", delim = "\t")
read_delim("a;b\n1;3", delim = ";")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("data.csv")
parse_double(c("1","2","3"))
parse_date("January 1, 2010")
parse_date("January 1, 2010", format = "%B %d, %Y")
