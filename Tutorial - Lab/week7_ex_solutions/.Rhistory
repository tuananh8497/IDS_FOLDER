summary(data_tidier$Year)
dt <- as_tibble(data_tidier) # Clone from previous step
# Replace all "Calm" value in the 9am/3pm wind speed with 0 (see ref)
# ref: http://www.bom.gov.au/marine/knowledge-centre/reference/wind.shtml
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)` <- gsub("Calm", "0", dt$`3pm_wind_speed_(km/h)`) # Change Calm -> 0
dt$`3pm_wind_speed_(km/h)` <- sapply(dt$`3pm_wind_speed_(km/h)`, as.numeric)
# I did test out several ways but stuck at keep original df
# while modify the numeric col only, and it include mean calculating as well
# Dirty Code for unsolved problem with loop
dt$Minimum_temperature[is.na(dt$Minimum_temperature)] <- median(dt$Minimum_temperature, na.rm = TRUE)
dt$Maximum_temperature[is.na(dt$Maximum_temperature)] <- median(dt$Maximum_temperature, na.rm = TRUE)
dt$`Rainfall_(mm)`[is.na(dt$`Rainfall_(mm)`)] <- median(dt$`Rainfall_(mm)`, na.rm = TRUE)
dt$`Speed_of_maximum_wind_gust_(km/h)`[is.na(dt$`Speed_of_maximum_wind_gust_(km/h)`)] <- median(dt$`Speed_of_maximum_wind_gust_(km/h)`, na.rm = TRUE)
dt$`9am_Temperature`[is.na(dt$`9am_Temperature`)] <- median(dt$`9am_Temperature`, na.rm = TRUE)
dt$`9am_relative_humidity_(%)`[is.na(dt$`9am_relative_humidity_(%)`)] <- median(dt$`9am_relative_humidity_(%)`, na.rm = TRUE)
dt$`9am_cloud_amount_(oktas)`[is.na(dt$`9am_cloud_amount_(oktas)`)] <-median(dt$`9am_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- median(dt$`9am_wind_speed_(km/h)`, na.rm = TRUE)
dt$`9am_MSL_pressure_(hPa)`[is.na(dt$`9am_MSL_pressure_(hPa)`)] <- median(dt$`9am_MSL_pressure_(hPa)`, na.rm = TRUE)
dt$`3pm_Temperature`[is.na(dt$`3pm_Temperature`)] <-  median(dt$`3pm_Temperature`, na.rm = TRUE)
dt$`3pm_relative_humidity_(%)`[is.na(dt$`3pm_relative_humidity_(%)`)] <- median(dt$`3pm_relative_humidity_(%)`, na.rm = TRUE)
dt$`3pm_cloud_amount_(oktas)`[is.na(dt$`3pm_cloud_amount_(oktas)`)] <- median(dt$`3pm_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- median(dt$`3pm_wind_speed_(km/h)`, na.rm = TRUE)
dt$`3pm_MSL_pressure_(hPa)`[is.na(dt$`3pm_MSL_pressure_(hPa)`)] <- median(dt$`3pm_MSL_pressure_(hPa)`, na.rm = TRUE)
# check any NA values left in the cols
dt <- na.omit(dt) # by now, only one row with NA value left, which is fine to remove it
sum(is.na(dt)) # sum of NAs in data, if = 0 <--> FINISHED WRANGLING
dt_finished <- as_tibble(dt)
# 1. Printing the summary (minimum, median, mean, maxiumum) of each of the following variables:
# Minimum_temperature
summary(dt_finished$Minimum_temperature)
# Maximum_temperature
summary(dt_finished$Maximum_temperature)
# 9am_Temperature
summary(dt_finished$`9am_Temperature`)
# 3pm_Temperature
summary(dt_finished$`3pm_Temperature`)
# Speed_of_maximum_wind_gust_(km/h)
summary(dt_finished$`Speed_of_maximum_wind_gust_(km/h)`)
avg_min_temp_month <- summarise(by_month, average = mean(by_month$Minimum_temperature))
by_month <- dt_finished %>%
group_by(Month, Minimum_temperature) %>%
# 2. Extracting the average of minimum temperature per month and year.
by_month <- dt_finished %>%
group_by(Month, Minimum_temperature) %>%
avg_min_temp_month <- summarise(by_month, average = mean(by_month$Minimum_temperature))
by_month
by_month <- dt_finished %>%
group_by(Month, Minimum_temperature)
View(by_month)
avg_min_temp_month <- summarise(by_month, average = mean(by_month$Minimum_temperature))
avg_min_temp_month
avg_min_temp_month
by_year <- dt_finished %>%
group_by(Year, Minimum_temperature)
avg_min_temp_year <- summarise(by_year, average = mean(by_year$Minimum_temperature))
avg_min_temp_year
library(nycflights13)
# group the data of the flights by the date
by_day <- group_by(flights, year, month, day)
# get the average delay per date
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
View(by_day)
by_month_year <- dt_finished %>%
group_by(Year, Month, Minimum_temperature)
summarise(by_month_year, average_min_temp = mean(Minimum_temperature, na.rm = TRUE))
# 3. Extracting the average of maximum temperature per month and year.
summarise(by_month_year, average_min_temp = mean(Maximum_temperature, na.rm = TRUE))
summarise(by_month_year, avg_min_temp = mean(Minimum_temperature, na.rm = TRUE))
# 3. Extracting the average of maximum temperature per month and year.
summarise(by_month_year, avg_max_temp = mean(Maximum_temperature, na.rm = TRUE))
# Imagine that we want to explore the relationship between the distance and
# average delay for each location.
by_dest <- group_by(flights, dest)
View(by_dest)
View(dt_finished)
View(dt_finished)
# extract the number of flights, average distance and average delay for each destination
dest_delay_relation <- summarise(by_dest, count= n(), dist= mean(distance, na.rm = TRUE), delay= mean(arr_delay, na.rm = TRUE) )
# Imagine that we want to explore the relationship between the distance and
# average delay for each location.
by_dest <- group_by(flights, dest)
# extract the number of flights, average distance and average delay for each destination
dest_delay_relation <- summarise(by_dest, count= n(), dist= mean(distance, na.rm = TRUE), delay= mean(arr_delay, na.rm = TRUE) )
library(dplyr)
# extract the number of flights, average distance and average delay for each destination
dest_delay_relation <- summarise(by_dest, count= n(), dist= mean(distance, na.rm = TRUE), delay= mean(arr_delay, na.rm = TRUE) )
# extract the number of flights, average distance and average delay for each destination
dest_delay_relation <- summarise(by_dest, count= n(), dist= mean(distance, na.rm = TRUE), delay= mean(arr_delay, na.rm = TRUE))
# using pipe:
dest_delay_relation3 <- flights %>%
group_by(dest) %>%
summarise(count= n(), dist= mean(distance, na.rm = TRUE), delay= mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20, dest != 'HNL') # the filter step is to remove the outlier
View(by_dest)
View(by_day)
View(by_day)
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum = mean(`Speed_of_maximum_wind_gust_(km/h)`), na.rm=T)
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum = mean(`Speed_of_maximum_wind_gust_(km/h)`))
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum_wind_gust = mean(`Speed_of_maximum_wind_gust_(km/h)`))
# 1. Printing the summary (minimum, median, mean, maxiumum) of each of the following variables:
# Minimum_temperature
summary(dt_finished$Minimum_temperature)
highest_rain_quality_month <- dt_finished %>%
group_by(Month) %>%
slice(which.max(`Rainfall_(mm)`))
highest_rain_quality_month
View(highest_rain_quality_month)
which.max(highest_rain_quality_month$`Rainfall_(mm)`)
highest_rain_fall_by_month <- dt_finished %>%
group_by(Month) %>%
slice(which.max(`Rainfall_(mm)`))
which.max(highest_rain_fall_by_month$`Rainfall_(mm)`)
driest_month <- dt_finished %>%
group_by(Year, Month) %>%
slice.(which.min(`Rainfall_(mm)`))
driest_month <- dt_finished %>%
group_by(Year, Month) %>%
slice(which.min(`Rainfall_(mm)`))
driest_month
View(highest_rain_quality_month)
View(driest_month)
# 4.	Departed in summer (July, August, and September)
filter(df, month %in% c(7, 8, 9))
list_driest_months <- dt_finished %>%
group_by(Year, Month) %>%
slice(which.min(`Rainfall_(mm)`))
#
grouped_by_month <- group_by(dt_finished, dt$Month)
View(by_month)
View(grouped_by_month)
counts_per_month <- summarise(grouped_by_month, count = n())
rlang::last_error()
library("tidyverse")
library(plyr)
library(dplyr)
library(readr)
library(lubridate)
counts_per_month <- summarise(grouped_by_month, count = n())
counts_per_month <- plyr::summarise(grouped_by_month, count = n())
counts_per_month <- dplyr::summarise(grouped_by_month, count = n())
counts_per_month
driest_month <- summarise(counts_per_month, min_month = month[which.min(count)], min_value= min(count) )
driest_month <- summarise(counts_per_month, min_month = month[which.min(count)], min_value= min(count))
# Load the 'nycflights13' dataset into a frame and then find all flights that:
library(tidyverse)
library(nycflights13)
# 1- What month had the highest proportion of cancelled flights?
cancelled_flights <- filter(flights, is.na(air_time))
grouped_by_month <- group_by(cancelled_flights, month)
counts_per_month <- summarise(grouped_by_month, count = n())
highest_prop <- summarise(counts_per_month, max_month= month[which.max(count)], max_value= max(count))
lowest_prop <- summarise(counts_per_month, min_month = month[which.min(count)], min_value= min(count))
average_cancelled <- summarise(counts_per_month, flight_cancelled_average = sum(count)/12)
View(average_cancelled)
# 2- What month had the lowest?
month_with_min <- summarise(counts_per_month, month= which.min(count))
month_with_min
driest_month <- summarise(counts_per_month, month= which.min(count))
driest_month
# 6. Which months were dry, if any, (i.e. no rainfall at all), And in which year?
list_driest_months <- dt_finished %>%
group_by(Year, Month) %>%
slice(which.min(`Rainfall_(mm)`))
#
grouped_by_month <- group_by(dt_finished, dt$Month)
counts_per_month <- dplyr::summarise(grouped_by_month, count = n())
driest_month <- summarise(counts_per_month, min_month = month[which.min(count)], min_value= min(count))
driest_month <- summarise(counts_per_month, month= which.min(count))
driest_month
counts_per_month
library("tidyverse")
library(plyr)
library(dplyr)
library(readr)
library(lubridate)
# data files, load the files into list in data folder and load all csv file
data_dir <- "data"
files <- list.files(path=data_dir, pattern = "*.csv", full.names = TRUE)
#files
# read the files one by one and append the new rows (skip the first 7 rows),
# change the date format of Column "Date"
df <- data.frame()
for (i in 1:length(files)){
temp <- read_csv(files[i], na='-',skip = 7,col_types = cols(
Date = col_date(format = "%d/%m/%Y"),  # Change the type of column called "Date" from character to Date type
`Evaporation (mm)`= col_double(),
`Sunshine (hours)`= col_double(),
`9am wind speed (km/h)` = col_double(),
`9pm wind speed (km/h)`= col_double()
),
)
df <- rbind(df, temp)
}
df_1 <- df[ , colSums(is.na(df)) < nrow(df) ]
df_1 <- as_tibble(df_1)
# 2. Drop the variables, which have few data  (NAs values are more than 90% of number of records in these variables)
colSums(is.na(df_1)) # Get the sum of NA values in each table
# Only 9am and 3pm cloud amount has over 250 NAs value in table (but not up to 90% so no action needed)
#df_2 <- df_1[ , colSums(is.na(df_1)) < 0.9 ] #this delete more than needed
# Change the column names to replace space with underscore the "_" character
colnames(df_1) <- gsub(" ", "_", colnames(df_1))
colnames(df_1)
# 3. Add 2 news columns (Month, Year) of the data in each file from the column "DATE"
data_tidier <- df_1 %>%
separate(Date, into = c("Year", "Month"), sep = "\\-", convert = TRUE)
# 4. Change the type of the "Month" and "Year" columns from Character to Ordinal with levels as the number of months in a year
data_tidier$Month <- parse_integer(data_tidier$Month)
data_tidier$Month <- factor(data_tidier$Month, order = TRUE, levels =c(1:12))
data_tidier$Year <-  parse_integer(data_tidier$Year)
data_tidier$Year <- factor(data_tidier$Year, order = TRUE, levels =c(2018, 2019, 2020))
dt <- as_tibble(data_tidier) # Clone from previous step
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)` <- gsub("Calm", "0", dt$`3pm_wind_speed_(km/h)`) # Change Calm -> 0
dt$`3pm_wind_speed_(km/h)` <- sapply(dt$`3pm_wind_speed_(km/h)`, as.numeric)
# I did test out several ways but stuck at keep original df
# while modify the numeric col only, and it include mean calculating as well
# Dirty Code for unsolved problem with loop
dt$Minimum_temperature[is.na(dt$Minimum_temperature)] <- median(dt$Minimum_temperature, na.rm = TRUE)
dt$Maximum_temperature[is.na(dt$Maximum_temperature)] <- median(dt$Maximum_temperature, na.rm = TRUE)
dt$`Rainfall_(mm)`[is.na(dt$`Rainfall_(mm)`)] <- median(dt$`Rainfall_(mm)`, na.rm = TRUE)
dt$`Speed_of_maximum_wind_gust_(km/h)`[is.na(dt$`Speed_of_maximum_wind_gust_(km/h)`)] <- median(dt$`Speed_of_maximum_wind_gust_(km/h)`, na.rm = TRUE)
dt$`9am_Temperature`[is.na(dt$`9am_Temperature`)] <- median(dt$`9am_Temperature`, na.rm = TRUE)
dt$`9am_relative_humidity_(%)`[is.na(dt$`9am_relative_humidity_(%)`)] <- median(dt$`9am_relative_humidity_(%)`, na.rm = TRUE)
dt$`9am_cloud_amount_(oktas)`[is.na(dt$`9am_cloud_amount_(oktas)`)] <-median(dt$`9am_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- median(dt$`9am_wind_speed_(km/h)`, na.rm = TRUE)
dt$`9am_MSL_pressure_(hPa)`[is.na(dt$`9am_MSL_pressure_(hPa)`)] <- median(dt$`9am_MSL_pressure_(hPa)`, na.rm = TRUE)
dt$`3pm_Temperature`[is.na(dt$`3pm_Temperature`)] <-  median(dt$`3pm_Temperature`, na.rm = TRUE)
dt$`3pm_relative_humidity_(%)`[is.na(dt$`3pm_relative_humidity_(%)`)] <- median(dt$`3pm_relative_humidity_(%)`, na.rm = TRUE)
dt$`3pm_cloud_amount_(oktas)`[is.na(dt$`3pm_cloud_amount_(oktas)`)] <- median(dt$`3pm_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- median(dt$`3pm_wind_speed_(km/h)`, na.rm = TRUE)
dt$`3pm_MSL_pressure_(hPa)`[is.na(dt$`3pm_MSL_pressure_(hPa)`)] <- median(dt$`3pm_MSL_pressure_(hPa)`, na.rm = TRUE)
# check any NA values left in the cols
dt <- na.omit(dt) # by now, only one row with NA value left, which is fine to remove it
sum(is.na(dt)) # sum of NAs in data, if = 0 <--> FINISHED WRANGLING
dt_finished <- as_tibble(dt)
summary(dt_finished$Minimum_temperature)
# Maximum_temperature
summary(dt_finished$Maximum_temperature)
# 9am_Temperature
summary(dt_finished$`9am_Temperature`)
# 3pm_Temperature
summary(dt_finished$`3pm_Temperature`)
# Speed_of_maximum_wind_gust_(km/h)
summary(dt_finished$`Speed_of_maximum_wind_gust_(km/h)`)
# 2. Extracting the average of minimum temperature per month and year.
by_month_year <- dt_finished %>%
group_by(Year, Month, Minimum_temperature)
summarise(by_month_year, avg_min_temp = mean(Minimum_temperature, na.rm = TRUE))
# 3. Extracting the average of maximum temperature per month and year.
summarise(by_month_year, avg_max_temp = mean(Maximum_temperature, na.rm = TRUE))
# 4. Extracting the average of speed of maximum wind gust per direction of maximum wind gust.
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum_wind_gust = mean(`Speed_of_maximum_wind_gust_(km/h)`))
# 5. Which month has the highest rain fall quality? And in which year?
highest_rain_fall_by_month <- dt_finished %>%
group_by(Month) %>%
slice(which.max(`Rainfall_(mm)`))
which.max(highest_rain_fall_by_month$`Rainfall_(mm)`) # Get the highest rain_fall month from the list
view(highest_rain_fall_by_month)
# 6. Which months were dry, if any, (i.e. no rainfall at all), And in which year?
list_driest_months <- dt_finished %>%
group_by(Year, Month) %>%
slice(which.min(`Rainfall_(mm)`))
View(list_driest_months)
View(dt_finished)
grouped_by_month <- group_by(list_driest_months, list_driest_months$Month)
counts_per_month <- dplyr::summarise(grouped_by_month, count = n())
driest_month <- summarise(counts_per_month, month= which.min(count))
driest_month
counts_per_month
length(which(dt_finished$`Rainfall_(mm)` == 0))
# 6. Which months were dry, if any, (i.e. no rainfall at all), And in which year?
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
summarise(average_rainfall = mean(`Rainfall_(mm)`))
by_month_year_rainfall
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
by_month_year_rainfall
view(by_month_year_rainfall)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
count(Month)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
count(., Month)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
by_month_year_rainfall
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
count(Month)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
count(.$Month)
by_month_year_rainfall
view(by_month_year_rainfall)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
by_month_year_rainfall
View(by_month_year_rainfall)
by_month_year_rainfall %>%
group_by(Year, Month) %>%
sum(colnames(.$Month))
by_month_year_rainfall
by_month_year_rainfall %>%
group_by(Year, Month) %>%
sum(by_month_year_rainfall$Month)
by_month_year_rainfall %>%
group_by(Year, Month) %>%
count(by_month_year_rainfall$Month)
by_month_year_rainfall %>%
group_by(Year, Month) %>%
summary(by_month_year_rainfall$Month)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
group_by(Month) %>%
summarise(count = n())
rlang::last_error()
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
group_by(Month) %>%
plyr::summarise(., count = n())
colSums(by_month_year_rainfall$Month)
colSums(by_month_year_rainfall)
colSums(by_month_year_rainfall)
colSums(by_month_year_rainfall$Month)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
group_by(Month) %>%
by_month_year_rainfall
View(by_month_year_rainfall)
View(dt_finished)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0) %>%
View(by_month_year_rainfall)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
View(by_month_year_rainfall)
table(by_month_year_rainfall)
table(by_month_year_rainfall$Month)
table(by_month_year_rainfall$Year)
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Lecture/w7/case_study")
data_file_male <- "data/1978-2017-australiansdg-indicator-8-5-2a-males.csv"
data_file_female <- "data/1978-2017-australiansdg-indicator-8-5-2a-females.csv"
### function to tide up the data
tide_data <- function(data, gender){
data_tidier <- data %>%
separate(Month, into = c("Month", "Year"), sep = "\\-")
# view(data_tidier)
# swap the two columns
temp <- data_tidier$Year[24:length(data_tidier$Year)]
data_tidier$Year[24:length(data_tidier$Year)] <-
data_tidier$Month[24:length(data_tidier$Month)]
data_tidier$Month[24:length(data_tidier$Month)] <- temp
data_tidier$Year <- parse_integer(data_tidier$Year)
# change to years
data_tidier$Year[data_tidier$Year > 17 ] =
data_tidier$Year[data_tidier$Year > 17] + 1900
data_tidier$Year[data_tidier$Year <= 17] =
data_tidier$Year[data_tidier$Year <= 17] + 2000
view(data_tidier)
col_names <- colnames(data_tidier)
data_tidier <- rename(data_tidier,
age_24=col_names[3],
age_34=col_names[4],
age_44=col_names[5],
age_54=col_names[6],
age_64=col_names[7],
age_65=col_names[8])
data_tidier <- data_tidier %>%
gather(age_group, unemp_rate, age_24: age_65)
return(data_tidier)
}
# load libraries
library(tidyverse)
### for males
# 1- Read CSV data
male_data <- read_csv(data_file_male, na = '-')
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
# 3- add `male` to the age groups
male_data_tidier$age_group <- paste("Male", male_data_tidier$age_group, sep = "-")
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
# 3- add `male` to the age groups
male_data_tidier$age_group <- paste("Male", male_data_tidier$age_group, sep = "-")
### for males
# 1- Read CSV data
male_data <- read_csv(data_file_male, na = '-')
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
# 3- add `male` to the age groups
male_data_tidier$age_group <- paste("Male", male_data_tidier$age_group, sep = "-")
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
# 3- add `male` to the age groups
male_data_tidier$age_group <- paste("Male", male_data_tidier$age_group, sep = "-")
male_data_tidier
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Lecture/w7/case_study")
data_file_male <- "data/1978-2017-australiansdg-indicator-8-5-2a-males.csv"
data_file_female <- "data/1978-2017-australiansdg-indicator-8-5-2a-females.csv"
### function to tide up the data
tide_data <- function(data, gender){
data_tidier <- data %>%
separate(Month, into = c("Month", "Year"), sep = "\\-")
# view(data_tidier)
# swap the two columns
temp <- data_tidier$Year[24:length(data_tidier$Year)]
data_tidier$Year[24:length(data_tidier$Year)] <-
data_tidier$Month[24:length(data_tidier$Month)]
data_tidier$Month[24:length(data_tidier$Month)] <- temp
data_tidier$Year <- parse_integer(data_tidier$Year)
# change to years
data_tidier$Year[data_tidier$Year > 17 ] =
data_tidier$Year[data_tidier$Year > 17] + 1900
data_tidier$Year[data_tidier$Year <= 17] =
data_tidier$Year[data_tidier$Year <= 17] + 2000
view(data_tidier)
col_names <- colnames(data_tidier)
data_tidier <- rename(data_tidier,
age_24=col_names[3],
age_34=col_names[4],
age_44=col_names[5],
age_54=col_names[6],
age_64=col_names[7],
age_65=col_names[8])
data_tidier <- data_tidier %>%
gather(age_group, unemp_rate, age_24: age_65)
return(data_tidier)
}
# load libraries
library(tidyverse)
### for males
# 1- Read CSV data
male_data <- read_csv(data_file_male, na = '-')
# 2- tide the data a bit
male_data_tidier <- tide_data(male_data, "Male")
setwd("D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/Tutorial - Lab/week7_ex_solutions")
# Week 7, Ex1:
library(tidyverse)
# read activities data
activities <- read_csv("activities.csv")
activities
# what happens if we just gather them?
activities %>%
gather(key = key, value = value, -id, -trt)
# Fixing the problem of having two values in one column using separate function:
activities %>%
gather(key = key, value = value, -id, -trt) %>%
separate(col = key, into = c("activity", "time"))
# if needed you can spread the different types of measurements back into their own columns.
activities %>%
gather(key = key, value = value, -id, -trt) %>%
separate(col = key, into = c("activity", "time")) %>%
spread(key = activity, value = value)
# save the results into a new tibble
tidy_activities <- activities %>%
gather(key = key, value = value, -id, -trt) %>%
separate(col = key, into = c("activity", "time"))
# extract summaries (mean, median, minimum, maximum):
tidy_activities %>%
group_by(activity) %>%
summarise(count= n(),
average= mean(value, na.rm=TRUE),
median= median(value, na.rm=TRUE),
minimum= min(value, na.rm=TRUE),
maximum= max(value, na.rm=TRUE))
# Week 7, Ex1:
library(tidyverse)
library(dplyr)
# extract summaries (mean, median, minimum, maximum):
tidy_activities %>%
group_by(activity) %>%
summarise(count= n(),
average= mean(value, na.rm=TRUE),
median= median(value, na.rm=TRUE),
minimum= min(value, na.rm=TRUE),
maximum= max(value, na.rm=TRUE))
library(plyr)
# extract summaries (mean, median, minimum, maximum):
tidy_activities %>%
group_by(activity) %>%
summarise(count= n(),
average= mean(value, na.rm=TRUE),
median= median(value, na.rm=TRUE),
minimum= min(value, na.rm=TRUE),
maximum= max(value, na.rm=TRUE))
