dt$`9am_cloud_amount_(oktas)`[is.na(dt$`9am_cloud_amount_(oktas)`)] <-median(dt$`9am_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- median(dt$`9am_wind_speed_(km/h)`, na.rm = TRUE)
dt$`9am_MSL_pressure_(hPa)`[is.na(dt$`9am_MSL_pressure_(hPa)`)] <- median(dt$`9am_MSL_pressure_(hPa)`, na.rm = TRUE)
dt$`3pm_Temperature`[is.na(dt$`3pm_Temperature`)] <-  median(dt$`3pm_Temperature`, na.rm = TRUE)
dt$`3pm_relative_humidity_(%)`[is.na(dt$`3pm_relative_humidity_(%)`)] <- median(dt$`3pm_relative_humidity_(%)`, na.rm = TRUE)
dt$`3pm_cloud_amount_(oktas)`[is.na(dt$`3pm_cloud_amount_(oktas)`)] <- median(dt$`3pm_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- median(dt$`3pm_wind_speed_(km/h)`, na.rm = TRUE)
dt$`3pm_MSL_pressure_(hPa)`[is.na(dt$`3pm_MSL_pressure_(hPa)`)] <- median(dt$`3pm_MSL_pressure_(hPa)`, na.rm = TRUE)
# check any NA values left in the cols
dt <- na.omit(dt) # by now, only one row with NA value left, which is fine to remove it
sum(is.na(dt)) # sum of NAs in data, if = 0 <--> FINISHED WRANGLING
dt_finished <- as_tibble(dt)
##################################################
##################### Part C #####################
##################################################
# 1. Printing the summary (minimum, median, mean, maxiumum) of each of the following variables:
# Minimum_temperature
summary(dt_finished$Minimum_temperature)
# Maximum_temperature
summary(dt_finished$Maximum_temperature)
# 9am_Temperature
summary(dt_finished$`9am_Temperature`)
# 3pm_Temperature
summary(dt_finished$`3pm_Temperature`)
# Speed_of_maximum_wind_gust_(km/h)
summary(dt_finished$`Speed_of_maximum_wind_gust_(km/h)`)
# 2. Extracting the average of minimum temperature per month and year.
by_month_year <- dt_finished %>%
group_by(Year, Month, Minimum_temperature)
summarise(by_month_year, avg_min_temp = mean(Minimum_temperature, na.rm = TRUE))
# 3. Extracting the average of maximum temperature per month and year.
summarise(by_month_year, avg_max_temp = mean(Maximum_temperature, na.rm = TRUE))
# 4. Extracting the average of speed of maximum wind gust per direction of maximum wind gust.
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum_wind_gust = mean(`Speed_of_maximum_wind_gust_(km/h)`))
# 5. Which month has the highest rain fall quality? And in which year?
highest_rain_fall_by_month <- dt_finished %>%
group_by(Month) %>%
slice(which.max(`Rainfall_(mm)`))
view(highest_rain_fall_by_month)
which.max(highest_rain_fall_by_month$`Rainfall_(mm)`) # Get the highest rain_fall month from the list
# 6. Which months were dry, if any, (i.e. no rainfall at all), And in which year?
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
table(by_month_year_rainfall$Month)
colSums(by_month_year_rainfall$Month)
table(by_month_year_rainfall$Year)
?table
lowest_month <- by_month_year_rainfall %>%
group_by(Year) %>%
table(Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year) %>%
table(.$Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year. Month) %>%
table(.$Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year, Month) %>%
colS(.$Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year, Month) %>%
colSums(.$Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year, Month) %>%
table(.$Month) %>%
which.min(.)
lowest_month <- by_month_year_rainfall %>%
group_by(Year) %>%
table(.$Month) %>%
which.min(.)
table(grouped_month_by_year$Month)
grouped_month_by_year <- group_by(by_month_year_rainfall$Year)
table(grouped_month_by_year$Month)
grouped_month_by_year <- group_by(by_month_year_rainfall$Year)
grouped_month_by_year <- group_by(by_month_year_rainfall, by_month_year_rainfall$Year)
table(grouped_month_by_year$Month)
table(by_month_year_rainfall$Month)
table(by_month_year_rainfall$Year)
View(highest_rain_fall_by_month)
View(by_month_year_rainfall)
by_month_year_rainfall %>%
filter(Year == 2018) %>%
table(.$Month)
by_month_year_rainfall %>%
filter(Year == 2018) %>%
table(Month)
by_month_year_rainfall %>%
filter(Year == 2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018)
View(year_2018)
count(by_month_year_rainfall)
a <-  count(by_month_year_rainfall)
view(a)
view(a)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
table(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018)
table(year_2018$Month)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018)
slice(which.max((table(.$Month))))
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018)
slice((table(year_2018$Month)))
which.max(table(year_2018$Month))
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018)
which.max(month = table(year_2018$Month))
which.max(table(year_2018$Month))
table(year_2018$Month)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
table(.$Month)
rlang::last_error()
install.packages('plyr')
install.packages("plyr")
library(plyr)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month)
# Introduction to Data Science (11372), Semester 1 2021
# Tuan Anh (Vincent) Nguyen - u3196825
# The code here is for the assignment purpose.
##################################################
##################### Part A #####################
##################################################
# install tidyverse if it is not installed
if (!("tidyverse" %in% rownames(installed.packages()))){
install.packages("tidyverse")
install.packages('plyr')
#install.packages("toOrdinal") # Install Ordinal -> Date conversion in Part B
}
# load the tidyverse library
library("tidyverse")
library(plyr)
library(dplyr)
library(readr)
library(lubridate)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month)
year_2018
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
which.max()
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
which.max(.)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
which.max(year_2018)
year_2018
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
which.max(year_2018$Month)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month)
which.max(year_2018$Month)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(count = Month)
year_2018
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month)
year_2018
which.max(year_2018$n)
dry_months <- summarise(year_2018, min_month = month[which.min(count)], min_value= min(count))
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(min_month = Month[which.max(.)], number_months = max(n))
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(min_month = Month[which.max(.)], number_months = max(n))
rlang::last_error()
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(month = Month[which.max(.)], number_months = max(n))
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(month = Month[which.max(.$n)])
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(month = Month[which.max(.$n)], number_months = [which.max(.$n)])
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
count(Month) %>%
summarise(month = Month[which.max(.$n)], number_months = n[which.max(.$n)])
year_2018
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
n = count(Month) %>%
summarise(Month = Month[which.max(.$n)], number_months = n[which.max(n)])
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n())
View(year_2018)
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(month= tailnum[which.max(count)], number_months= count[which.max(count)])
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(month= Month[which.max(Month)], number_months= count[which.max(count)])
year_2018
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n())
View(year_2018)
grouped_month_by_year <- group_by(by_month_year_rainfall, by_month_year_rainfall$Year)
table(grouped_month_by_year$Month)
by_month_year_rainfall
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(month= Month[which.max(Month)], number_months= count[which.max(count)])
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(number_months= count[which.max(count)])
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
View(year_2018)
year_2018
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n())
View(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
year_2018 <- by_month_year_rainfall %>%
grou_by(Year) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
year_2018 <- by_month_year_rainfall %>%
group_by(Year) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
view(.)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)]) %>%
view(year_2018)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
view(year_2018)
print(year_2018)
print(year_2018)
print(year_2019)
print(year_2020)
year_2019 <- by_month_year_rainfall %>%
filter(Year == 2019) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
year_2020 <- by_month_year_rainfall %>%
filter(Year == 2020) %>%
summarise(count = n()) %>%
summarise(Month = Month[which.max(count)], number_months= count[which.max(count)])
print(year_2018)
print(year_2019)
print(year_2020)
year_2018 <- by_month_year_rainfall %>%
filter(Year == 2018) %>%
summarise(count = n())
View(year_2018)
View(df)
count(by_month_year_rainfall$Year)
count(by_month_year_rainfall)
count(by_month_year_rainfall)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
count(.)
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
count()
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
count(.groups)
count(by_month_year_rainfall)
source('D:/University of Canberra/UC - Sem 1 2021/Introduction to Data Science/IDS - Assignment Data Wrangling and Exploration/asgt_1.R', echo=TRUE)
humidity_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019) %>%
which.max()
humidity_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019) %>%
which.max(.$`3pm_relative_humidity_(%)`)
month_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019)
month_2019
dry_month_tbl <- count(by_month_year_rainfall)
dry_month_tbl
table(dry_month_tbl)
count(dry_month_tbl$Month)
colSums(dry_month_tbl)
colSums(dry_month_tbl$Month)
dry_month_tbl
filter(dry_month_tbl, n > 20)
filter(dry_month_tbl, n > 25)
filter(dry_month_tbl, n > 24)
month_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019)
month_2019
str(month_2019)
spec(month_2019)
spec(month_2019)
dim(month_2019)
select(month_2019, Year, Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
humidity_2019 <- select(month_2019, Year, Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
view(humidity_2019)
# processe the humidity related columns only
humidity_2019 <- select(month_2019, Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
humidity_2019
month_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019)
humidity_2019 <- select(month_2019, Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
View(humidity_2019)
# install tidyverse if it is not installed
if (!("tidyverse" %in% rownames(installed.packages()))){
install.packages("tidyverse")
install.packages('plyr')
#install.packages("toOrdinal") # Install Ordinal -> Date conversion in Part B
}
# load the tidyverse library
library("tidyverse")
library(plyr)
library(dplyr)
library(readr)
library(lubridate)
# data files, load the files into list in data folder and load all csv file
data_dir <- "data"
files <- list.files(path=data_dir, pattern = "*.csv", full.names = TRUE)
#files
# read the files one by one and append the new rows (skip the first 7 rows),
# change the date format of Column "Date"
df <- data.frame()
for (i in 1:length(files)){
temp <- read_csv(files[i], na='-',skip = 7,col_types = cols(
Date = col_date(format = "%d/%m/%Y"),  # Change the type of column called "Date" from character to Date type
`Evaporation (mm)`= col_double(),
`Sunshine (hours)`= col_double(),
`9am wind speed (km/h)` = col_double(),
`9pm wind speed (km/h)`= col_double()
),
)
df <- rbind(df, temp)
}
# Inspect the structure of data project
str(df)
spec(df)
# view the data with R studio viewer
view(df)
# check for problems
problems(df)
# assert that there is no problem
assertthat::assert_that(nrow(problems(df)) == 0,
msg="There is still problem/s, which you need to fix first")
# print the data dimension
dim(df)
##################################################
##################### Part B #####################
##################################################
# 1. Remove the variables, which have no data at all (all the records in these variables are NAs)
df_1 <- df[ , colSums(is.na(df)) < nrow(df) ]
df_1 <- as_tibble(df_1)
# 2. Drop the variables, which have few data  (NAs values are more than 90% of number of records in these variables)
colSums(is.na(df_1)) # Get the sum of NA values in each table
# Only 9am and 3pm cloud amount has over 250 NAs value in table (but not up to 90% so no action needed)
#df_2 <- df_1[ , colSums(is.na(df_1)) < 0.9 ] #this delete more than needed
# Change the column names to replace space with underscore the "_" character
colnames(df_1) <- gsub(" ", "_", colnames(df_1))
colnames(df_1)
# 3. Add 2 news columns (Month, Year) of the data in each file from the column "DATE"
data_tidier <- df_1 %>%
separate(Date, into = c("Year", "Month"), sep = "\\-", convert = TRUE)
# 4. Change the type of the "Month" and "Year" columns from Character to Ordinal with levels as the number of months in a year
data_tidier$Month <- parse_integer(data_tidier$Month)
data_tidier$Month <- factor(data_tidier$Month, order = TRUE, levels =c(1:12))
data_tidier$Year <-  parse_integer(data_tidier$Year)
data_tidier$Year <- factor(data_tidier$Year, order = TRUE, levels =c(2018, 2019, 2020))
# Check to see if the Ordinal worked! Summary the number of Month and Year.
summary(data_tidier$Month)
summary(data_tidier$Year)
# 5. For all numeric columns, replace the remaining NAs with the median of values in the columns, if exist
dt <- as_tibble(data_tidier) # Clone from previous step
# Replace all "Calm" value in the 9am/3pm wind speed with 0 (see ref)
# ref: http://www.bom.gov.au/marine/knowledge-centre/reference/wind.shtml
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- 0
dt$`3pm_wind_speed_(km/h)` <- gsub("Calm", "0", dt$`3pm_wind_speed_(km/h)`) # Change Calm -> 0
dt$`3pm_wind_speed_(km/h)` <- sapply(dt$`3pm_wind_speed_(km/h)`, as.numeric)
# I did test out several ways but stuck at keep original df
# while modify the numeric col only, and it include mean calculating as well
# Dirty Code for unsolved problem with loop
dt$Minimum_temperature[is.na(dt$Minimum_temperature)] <- median(dt$Minimum_temperature, na.rm = TRUE)
dt$Maximum_temperature[is.na(dt$Maximum_temperature)] <- median(dt$Maximum_temperature, na.rm = TRUE)
dt$`Rainfall_(mm)`[is.na(dt$`Rainfall_(mm)`)] <- median(dt$`Rainfall_(mm)`, na.rm = TRUE)
dt$`Speed_of_maximum_wind_gust_(km/h)`[is.na(dt$`Speed_of_maximum_wind_gust_(km/h)`)] <- median(dt$`Speed_of_maximum_wind_gust_(km/h)`, na.rm = TRUE)
dt$`9am_Temperature`[is.na(dt$`9am_Temperature`)] <- median(dt$`9am_Temperature`, na.rm = TRUE)
dt$`9am_relative_humidity_(%)`[is.na(dt$`9am_relative_humidity_(%)`)] <- median(dt$`9am_relative_humidity_(%)`, na.rm = TRUE)
dt$`9am_cloud_amount_(oktas)`[is.na(dt$`9am_cloud_amount_(oktas)`)] <-median(dt$`9am_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`9am_wind_speed_(km/h)`[is.na(dt$`9am_wind_speed_(km/h)`)] <- median(dt$`9am_wind_speed_(km/h)`, na.rm = TRUE)
dt$`9am_MSL_pressure_(hPa)`[is.na(dt$`9am_MSL_pressure_(hPa)`)] <- median(dt$`9am_MSL_pressure_(hPa)`, na.rm = TRUE)
dt$`3pm_Temperature`[is.na(dt$`3pm_Temperature`)] <-  median(dt$`3pm_Temperature`, na.rm = TRUE)
dt$`3pm_relative_humidity_(%)`[is.na(dt$`3pm_relative_humidity_(%)`)] <- median(dt$`3pm_relative_humidity_(%)`, na.rm = TRUE)
dt$`3pm_cloud_amount_(oktas)`[is.na(dt$`3pm_cloud_amount_(oktas)`)] <- median(dt$`3pm_cloud_amount_(oktas)`, na.rm = TRUE)
dt$`3pm_wind_speed_(km/h)`[is.na(dt$`3pm_wind_speed_(km/h)`)] <- median(dt$`3pm_wind_speed_(km/h)`, na.rm = TRUE)
dt$`3pm_MSL_pressure_(hPa)`[is.na(dt$`3pm_MSL_pressure_(hPa)`)] <- median(dt$`3pm_MSL_pressure_(hPa)`, na.rm = TRUE)
# check any NA values left in the cols
dt <- na.omit(dt) # by now, only one row with NA value left, which is fine to remove it
sum(is.na(dt)) # sum of NAs in data, if = 0 <--> FINISHED WRANGLING
dt_finished <- as_tibble(dt)
##################################################
##################### Part C #####################
##################################################
# 1. Printing the summary (minimum, median, mean, maxiumum) of each of the following variables:
# Minimum_temperature
summary(dt_finished$Minimum_temperature)
# Maximum_temperature
summary(dt_finished$Maximum_temperature)
# 9am_Temperature
summary(dt_finished$`9am_Temperature`)
# 3pm_Temperature
summary(dt_finished$`3pm_Temperature`)
# Speed_of_maximum_wind_gust_(km/h)
summary(dt_finished$`Speed_of_maximum_wind_gust_(km/h)`)
# 2. Extracting the average of minimum temperature per month and year.
by_month_year <- dt_finished %>%
group_by(Year, Month, Minimum_temperature)
summarise(by_month_year, avg_min_temp = mean(Minimum_temperature, na.rm = TRUE))
# 3. Extracting the average of maximum temperature per month and year.
summarise(by_month_year, avg_max_temp = mean(Maximum_temperature, na.rm = TRUE))
# 4. Extracting the average of speed of maximum wind gust per direction of maximum wind gust.
dt_finished %>%
group_by(., Direction_of_maximum_wind_gust) %>%
summarise(avg_speed_maximum_wind_gust = mean(`Speed_of_maximum_wind_gust_(km/h)`))
# 5. Which month has the highest rain fall quality? And in which year?
highest_rain_fall_by_month <- dt_finished %>%
group_by(Month) %>%
slice(which.max(`Rainfall_(mm)`))
view(highest_rain_fall_by_month)
which.max(highest_rain_fall_by_month$`Rainfall_(mm)`) # Get the highest rain_fall month from the list
# 6. Which months were dry, if any, (i.e. no rainfall at all), And in which year?
by_month_year_rainfall <- dt_finished %>%
group_by(Year, Month) %>%
filter(`Rainfall_(mm)`== 0)
dry_month_tbl <- count(by_month_year_rainfall) # save result to another table
filter(dry_month_tbl, n > 24) # Get the months in each year which have more than 24 days without rain
# 7. What about the humidity, which month in the ACT
# has the highest humidity level in the 2019
month_2019 <- dt_finished %>%
group_by(Year, Month) %>%
filter(Year == 2019)
# processe the humidity related columns only
humidity_2019 <- select(month_2019, Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
View(month_2019)
View(humidity_2019)
# processe the humidity related columns only
humidity_2019 <- select(month_2019, Year ,Month, `9am_relative_humidity_(%)`, `3pm_relative_humidity_(%)`)
View(humidity_2019)
